//////////////////////////////////////////////////////////////////////////////////////////
//
//  Terrain Modifyer for 50m/5m Mesh Map v1.7
//                                                by Fumi.Iseki
//
//  Command
//      /5050 mapcover
//      /5050 mapping    map_code [cord_type] [map_site] [map_zoom] [map_type] [cover_fac] [mesh_size] [wait_fac]  
//                             [[size] [magnification] [sealevel] [xyrate]]
//
//      /5050 mapterrain map_code [cord_type] [size] [magnification] [sealevel] [xyrate]]
//                             [[map_site] [map_zoom] [map_type] [cover_fac] [mesh_size] [wait_fac]]  
//
//      /5050 terrain  map_code [cord_type] [size] [magnification] [sealevel] [xyrate] 
//      /5050 covering map_code [cord_type] [map_site] [map_zoom] [map_type] [xyrate] [cover_fac] [mesh_size] [wait_fac]
//      /5050 texture  map_code [cord_type] [map_site] [map_zoom] [map_type] [xyrate] [wait_fac]
//
//      /5050 fill meter
//
//      /5050 recover
//      /5050 reset
//      /5050 lreset        // ローカルリセット
//      /5050 transp
//

string  VERSION = "1.70";
integer DEFAULT_CHANNEL = 5050;

string  default_map_site = "yahoo";
string  default_map_size = "256";
string  default_map_mag  = "1.0";
string  default_map_sea  = "20";
string  default_map_xyrate = "1.0";

string  notecard_name = "TerrainMod.conf";
key     notecard_key  = NULL_KEY;
integer notecard_line = 0;
integer cmd_channel   = 0;
integer listen_hdl    = 0;
key     http_id       = NULL_KEY;



//
// for Terrain Cover
integer CVR_CMD_CHANNEL = 5010;

integer refresh_time = 43200;
integer exec_cover   = TRUE;
integer cvr_channel  = 0;
string  cvr_command  = "";
string  default_cord_type = "srtm3";
string  default_tex_zoom = "2";
string  default_map_type = "satellite";
string  default_cover_fac = "0.50";
string  default_mesh_size = "64";
string  default_wait_fac = "15.0";

//
// Static Variable
string map_data_url = "";
string map_site  = "";
string map_code  = "";
string map_size  = "";
string map_mgnf  = "";
string map_seal  = "";
string tex_zoom  = "";
string map_type  = "";
string cover_fac = "";
string mesh_size = "";
string wait_fac  = "";
string cord_type = "";
string map_xyrt  = "";


////////////////////////////////////////////////////////////////////
//
//

terrain_request_data(string name, string ctype, string size, string mag, string sea, string rate)
{
    string request = map_data_url+"/"+ctype+"/?name="+name+"&size="+size+"&mag="+mag+"&sea="+sea+"&rate="+rate;
    llSay(0, "Request URL = "+request);
    http_id = llHTTPRequest(request, [], "");    
}



// 地形を生成
terrain_set(string data, string xyrate)
{
    float rate;
    
    if (data=="") {
        llSay(0, "ERROR: no data.");
    }
    else if (llGetSubString(data,0,5)=="ERROR:" || data=="Internal Server Error") {
        llSay(0, data);
    }
    else {
        llSay(0, "Start Map Processing.");
        if ((float)xyrate<=0.0) xyrate = default_map_xyrate;
        if ((float)xyrate<=0.0) xyrate = "1.0";
        
        osTerrainSetByString(data, (float)xyrate);
        llSay(0, "Update Terrain.");
        
        osTerrainFlush();
        llSay(0, "Done Modify Terrain.");
    }
}



// 標高を設定
terrain_fill(float meter)
{
    llSay(0, "Start Map Processing.");
    osTerrainFill(meter);
    llSay(0, "Update Terrain.");
    osTerrainFlush();
    llSay(0, "Done Modify Terrain.");
    moveto_ground();
}



terrain_init()
{
    cmd_channel  = DEFAULT_CHANNEL;
    cvr_channel  = CVR_CMD_CHANNEL;
    cvr_command  = "";
    exec_cover   = TRUE;
    llSetTimerEvent(0.0); 

    if (listen_hdl!=0) llListenRemove(listen_hdl);
    listen_hdl = llListen(cmd_channel, "", NULL_KEY, "");

    notecard_line = 0;
    if (llGetInventoryType(notecard_name)==INVENTORY_NOTECARD) {
        notecard_key = llGetNotecardLine(notecard_name, 0); 
    }
    
    moveto_ground();
    //llSay(0, "Resetted");
}



moveto_ground()
{
    float gotolv;
    
    vector pos = llGetPos();    
    float ground = llGround(ZERO_VECTOR);
    float wtrlvl = llWater (ZERO_VECTOR);
    
    if (ground>wtrlvl) gotolv = ground;
    else gotolv = wtrlvl;
    gotolv += 2.0;

    while((integer)pos.z!=(integer)gotolv) {
        llSetPos(<pos.x, pos.y, gotolv>);
        pos = llGetPos();
    }
    //llSay(0, "Moved to Ground " + (string)pos);
}




////////////////////////////////////////////////////////////////////
//
//

// ノートカードの読み込み
integer parse_conf_file(string str) 
{
    list   items = llParseString2List(str,["=", ",", " ", "\n"], []);
    string name  = llList2String(items,0);
    string value = llList2String(items,1);

    if (name == "cmd_channel") {
        cmd_channel = (integer)value;
        llSay(0, "Listen Channel is " + value);
        return TRUE;
    } 
    else if (name == "map_data_url") {
        map_data_url = value;
        llSay(0, "Data Base URL is " + value);
    }
    else if (name == "default_map_size") {
        default_map_size = value;
        llSay(0, "Default Map Size is " + value);
    }
    else if (name == "default_map_mag") {
        default_map_mag = value;
        llSay(0, "Default Map Magnification is " + value);
    }
    else if (name == "default_map_sea") {
        default_map_sea = value;
        llSay(0, "Default Map Sea Level is " + value);
    }
    else if (name == "default_map_xyrate") {
        default_map_xyrate = value;
        llSay(0, "Default Map XY Rate is " + value);
    }

    //
    else if (name == "refresh_time") {
        refresh_time = (integer)value;
        llSay(0, "Map Refresh Time is " + value + "s");
    } 
    else if (name == "cvr_channel") {
        cvr_channel = (integer)value;
        llSay(0, "Cover Command Channel is " + value);
    } 
    else if (name == "default_map_site") {
        default_map_site = value;
        llSay(0, "Default Map Site is " + value);
    }
    else if (name == "default_texture_zoom") {
        default_tex_zoom = value;
        llSay(0, "Default Texture Zoom is " + value);
    }
    else if (name == "default_cord_type") {
        default_cord_type = value;
        llSay(0, "Default Coordinate Type is " + value);
    }
    else if (name == "default_map_type") {
        default_map_type = value;
        llSay(0, "Default Map Type is " + value);
    }
    else if (name == "default_cover_fac") {
        default_cover_fac = value;
        llSay(0, "Default Cover Factor is " + value);
    }
    else if (name == "default_mesh_size") {
        default_mesh_size = value;
        llSay(0, "Default Cover Mesh Size is " + value);
    }
    else if (name == "default_wait_fac") {
        default_wait_fac = value;
        llSay(0, "Default Wait Factor is " + value);
    }

    return FALSE;
}



////////////////////////////////////////////////////////////////////
//
//
default
{
    // ノートカードが一行読まれる度に発生するイベント
    dataserver(key requested_key, string data)
    {
        if (requested_key == notecard_key ){
            notecard_key = NULL_KEY;
            if (data != EOF){
                if (parse_conf_file(data)) {  
                    // チャンネル番号の再設定．
                    if (listen_hdl!=0) llListenRemove(listen_hdl);
                    listen_hdl = llListen(cmd_channel, "", NULL_KEY, "");
                }
                notecard_line++;
                notecard_key = llGetNotecardLine(notecard_name, notecard_line);
            }
        }
     }


    listen(integer ch, string name, key id, string msg) 
    {
        if (listen_hdl!=0) llListenRemove(listen_hdl);
        //llSay(0, "Recived: " + msg);

        list items = llParseString2List(msg, ["=", ",", " ","\n"], []);
        string cmd = llList2String(items, 0);
        
        // mapterrain map_code [cord_type] [size] [magnification] [sealevel] [xyrate]  [[map_site] [map_zoom] [map_type] [cover_fac] [mesh_size]]
        if (cmd=="mapterrain") {
            map_code = llList2String(items, 1);
            if (map_code!="") {                
                cord_type = llList2String(items, 2);
                map_size  = llList2String(items, 3);
                map_mgnf  = llList2String(items, 4);
                map_seal  = llList2String(items, 5);
                map_xyrt  = llList2String(items, 6);

                if (cord_type=="") cord_type = default_cord_type;
                if (map_size=="")  map_size  = default_map_size;
                if (map_mgnf=="")  map_mgnf  = default_map_mag;
                if (map_seal=="")  map_seal  = default_map_sea;
                if (map_xyrt=="")  map_xyrt  = default_map_xyrate;

                map_site  = llList2String(items, 7);
                tex_zoom  = llList2String(items, 8);
                map_type  = llList2String(items, 9);
                cover_fac = llList2String(items, 10);
                mesh_size = llList2String(items, 11);
                wait_fac  = llList2String(items, 12);
                
                if (map_site=="")  map_site  = default_map_site;
                if (tex_zoom=="")  tex_zoom  = default_tex_zoom;
                if (map_type=="")  map_type  = default_map_type;                
                if (cover_fac=="") cover_fac = default_cover_fac;
                if (mesh_size=="") mesh_size = default_mesh_size;
                if (wait_fac=="")  wait_fac  = default_wait_fac;
                
                llShout(0, "Ready? Wait 3s.");
                llSleep(3);
                llShout(0, "Go!!");
            
                exec_cover = TRUE;  
                terrain_request_data(map_code, cord_type, map_size, map_mgnf, map_seal, map_xyrt);
            }
        }
        
        // mapcover map_code [cord_type] [map_site] [map_zoom] [map_type] [cover_fac] [mesh_size] [wait_fac] [[size] [magnification] [sealevel] [xyrate]]
        else if (cmd=="mapcover" || cmd=="mapping") {
            map_code = llList2String(items, 1);
            if (map_code!="") {                
                cord_type = llList2String(items, 2);
                map_size  = llList2String(items, 9);
                map_mgnf  = llList2String(items, 10);
                map_seal  = llList2String(items, 11);
                map_xyrt  = llList2String(items, 12);

                if (cord_type=="") cord_type = default_cord_type;
                if (map_size=="")  map_size  = default_map_size;
                if (map_mgnf=="")  map_mgnf  = default_map_mag;
                if (map_seal=="")  map_seal  = default_map_sea;
                if (map_xyrt=="")  map_xyrt  = default_map_xyrate;

                map_site  = llList2String(items, 3);
                tex_zoom  = llList2String(items, 4);
                map_type  = llList2String(items, 5);
                cover_fac = llList2String(items, 6);
                mesh_size = llList2String(items, 7);
                wait_fac  = llList2String(items, 8);
                
                if (map_site=="")  map_site  = default_map_site;
                if (tex_zoom=="")  tex_zoom  = default_tex_zoom;
                if (map_type=="")  map_type  = default_map_type;                
                if (cover_fac=="") cover_fac = default_cover_fac;
                if (mesh_size=="") mesh_size = default_mesh_size;
                if (wait_fac=="")  wait_fac  = default_wait_fac;
                
                llShout(0, "Ready? Wait 3s.");
                llSleep(3);
                llShout(0, "Go!!");
                
                exec_cover = TRUE;             
                terrain_request_data(map_code, cord_type, map_size, map_mgnf, map_seal, map_xyrt);
            }
        }

        // terrain map_code [cord_type] [size] [magnification] [sealevel] [xyrate]
        else if (cmd=="terrain") {
            map_code = llList2String(items, 1);
            if (map_code!="") {                
                cord_type = llList2String(items, 2);
                map_size  = llList2String(items, 3);
                map_mgnf  = llList2String(items, 4);
                map_seal  = llList2String(items, 5);
                map_xyrt  = llList2String(items, 6);

                if (cord_type=="") cord_type = default_cord_type;
                if (map_size=="")  map_size  = default_map_size;
                if (map_mgnf=="")  map_mgnf  = default_map_mag;
                if (map_seal=="")  map_seal  = default_map_sea;
                if (map_xyrt=="")  map_xyrt  = default_map_xyrate;

                llShout(0, "Ready? Wait 3s.");
                llSleep(3);
                llShout(0, "Go!!");
                       
                exec_cover = FALSE;         
                terrain_request_data(map_code, cord_type, map_size, map_mgnf, map_seal, map_xyrt);
            }
        }
        
        // covering map_code [cord_type] [map_site] [map_zoom] [map_type] [xyrate] [cover_fac] [mesh_size] [wait_fac]
        else if (cmd=="covering" || cmd=="cover") {
            map_code = llList2String(items, 1);
            if (map_code!="") {                
                cord_type = llList2String(items, 2);
                map_site  = llList2String(items, 3);
                tex_zoom  = llList2String(items, 4);
                map_type  = llList2String(items, 5);
                map_xyrt  = llList2String(items, 6);
                cover_fac = llList2String(items, 7);
                mesh_size = llList2String(items, 8);
                wait_fac  = llList2String(items, 9);
                
                if (cord_type=="") cord_type = default_cord_type;
                if (map_site=="")  map_site  = default_map_site;
                if (tex_zoom=="")  tex_zoom  = default_tex_zoom;
                if (map_type=="")  map_type  = default_map_type;                
                if (cover_fac=="") cover_fac = default_cover_fac;
                if (mesh_size=="") mesh_size = default_mesh_size;
                if (wait_fac=="")  wait_fac  = default_wait_fac;
                if (map_xyrt=="")  map_xyrt  = default_map_xyrate;

                cvr_command = "covering "+map_code+" "+cord_type+" "+map_site+" "+tex_zoom+" "+map_type+" "+map_xyrt+" "+cover_fac+" "+mesh_size+" "+wait_fac;
                llSay(0, cvr_command);
                llRegionSay(cvr_channel, cvr_command);
                llSetTimerEvent((float)refresh_time); 
            }
            else {
                llSay(0, "Map Code is missed.");
            }
        }
        
        // texture map_code [cord_type] [map_site] [map_zoom] [map_type] [xyrate] [wait_fac]
        else if (cmd=="texture") {
            map_code = llList2String(items, 1);
            if (map_code!="") {                
                cord_type = llList2String(items, 2);
                map_site  = llList2String(items, 3);
                tex_zoom  = llList2String(items, 4);
                map_type  = llList2String(items, 5);
                map_xyrt  = llList2String(items, 6);
                wait_fac  = llList2String(items, 7);
                
                if (cord_type=="") cord_type = default_cord_type;
                if (map_site=="")  map_site  = default_map_site;
                if (tex_zoom=="")  tex_zoom  = default_tex_zoom;
                if (map_type=="")  map_type  = default_map_type;                
                if (wait_fac=="")  wait_fac  = default_wait_fac;
                if (map_xyrt=="")  map_xyrt  = default_map_xyrate;
                
                cvr_command = "texture "+map_code+" "+cord_type+" "+map_site+" "+tex_zoom+" "+map_type+" "+map_xyrt+" "+wait_fac;
                llSay(0, cvr_command);
                llRegionSay(cvr_channel, cvr_command);
                llSetTimerEvent((float)refresh_time); 
            }
            else {
                llSay(0, "Map Code is missed.");
            }
        }
        
        else if (cmd=="fill") {
            llSetTimerEvent(0.0);
            string arg = llList2String(items, 1);
            //llSay(0, cmd);
            if (arg!="" && arg!=" ") {
                float meter = llList2Float(items, 1);
                terrain_fill(meter);
                cvr_command = "covering 0 0 0 0 0 "+default_cover_fac+" 1.0 "+default_mesh_size+" "+default_wait_fac;
                llRegionSay(cvr_channel, cvr_command);
                cvr_command = "";
            }
        }
        
        else if (cmd=="recover") {
            if (cvr_command!="") llRegionSay(cvr_channel, cvr_command);
        }
        
        else if (cmd=="transp") {
            llSetTimerEvent(0.0);
            llRegionSay(cvr_channel, cmd);
        }
        
        else if (cmd=="reset") {
            terrain_init();
            llRegionSay(cvr_channel, cmd);
        }

        else if (cmd=="lreset") {
            terrain_init();
        }

        else {
            llSay(0, "Unknown Command: " + cmd);
        }
        
        if (listen_hdl!=0) llListenRemove(listen_hdl);
        listen_hdl = llListen(cmd_channel, "", NULL_KEY, "");
    }


    // 
    http_response(key id, integer status, list data, string body)
    {
        if (id==http_id) {
            if ((float)map_xyrt<=0.0) {
                list lines = llParseString2List(body, ["\n"], []);
                integer nn = llGetListLength(lines);
                map_xyrt = (string)((float)(nn-1)/(float)map_size);
                llSay(0, "RATE = "+map_xyrt);
                if ((float)map_xyrt==0.0) map_xyrt = default_map_xyrate;
                if ((float)map_xyrt==0.0) map_xyrt = "1.0";
            }
            terrain_set(body, map_xyrt);

            if (exec_cover) {
                // cover map_code [cord_type] [map_site] [zoom] [type] [cover_factor] [map_xyrate] [mesh_size] [wait_fac]
                cvr_command = "covering "+map_code+" "+cord_type+" "+map_site+" "+tex_zoom+" "+map_type+" "+map_xyrt+" "+cover_fac+" "+mesh_size+" "+wait_fac;
                llShout(0, cvr_command);
                llRegionSay(cvr_channel, cvr_command);
                llSetTimerEvent((float)refresh_time); 
            }
            
            moveto_ground();
            llSleep(3);
            moveto_ground();
        }
    }


    state_entry()
    {
        terrain_init();
        llSetText("Terrain Modifyer " + VERSION, <1.0, 1.0, 1.0>, 1);
        llTargetOmega(<0,0,1>, 1, 1);
    }


    on_rez(integer start_param) 
    {
        llResetScript();
    }


    touch_start(integer total_number)
    {
    }


    timer()
    {
        if (cvr_command!="") llRegionSay(cvr_channel, cvr_command);
    }
}

